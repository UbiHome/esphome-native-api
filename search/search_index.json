{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Crate | docs.rs</p>"},{"location":"#rust-crate-for-the-esphome-native-api","title":"Rust Crate for the esphome Native API","text":"<p>Implementation of the esphome native API for Rust.</p>"},{"location":"#usage","title":"Usage","text":"<p>For simplue usage, you can add the crate to your <code>Cargo.toml</code>:</p> <pre><code>cargo add esphome-native-api\n</code></pre> <p>Have a look at the examples on how to use it.</p>"},{"location":"#only-proto-definitions","title":"Only proto definitions","text":"<p>If you only want the to use the proto definitions (alrady <code>no_std</code> conform), you target the feature flag with the specific version you want to use: </p> <pre><code>cargo add esphome-native-api --features \"version_2025_7_3\"\n</code></pre>"},{"location":"#roadmap","title":"Roadmap","text":"<ul> <li> Fully <code>no_std</code> compatible</li> <li> \"Easy\" server which abstracts some of the complexity of the API</li> </ul>"},{"location":"native_api/","title":"Missing Native API Documentation","text":"<ul> <li>TCP Based</li> <li>Protocol Buffers</li> </ul>"},{"location":"native_api/#entities","title":"Entities","text":"<ul> <li>Sensor Mappings   https://github.com/esphome/aioesphomeapi/blob/e14b6ec9315695ba13e7cf6b750bc892b77a0a2e/aioesphomeapi/model.py#L433</li> </ul>"},{"location":"native_api/bluetooth_proxy/","title":"Bluetooth proxy","text":"<p>HelloResponse: api_version_major: 1 api_version_minor: 10</p> <p>DeviceInfoResponse: name: \"bluetooth-proxy\" mac_address: \"E4:65:B8:A3:90:00\" esphome_version: \"2025.4.1\" compilation_time: \"May  2 2025, 03:08:50\" model: \"esp32dev\" legacy_bluetooth_proxy_version: 5 manufacturer: \"Espressif\" friendly_name: \"bluetooth-proxy\" bluetooth_proxy_feature_flags: 63 bluetooth_mac_address: \"E4:65:B8:A3:90:02\"</p> <p>https://github.com/esphome/aioesphomeapi/blob/71bcda2c2cf9aecf3843c01937a24e012f7a3244/aioesphomeapi/model.py#L110 =&gt;  class BluetoothProxyFeature(enum.IntFlag):     PASSIVE_SCAN = 1 &lt;&lt; 0             # 1     ACTIVE_CONNECTIONS = 1 &lt;&lt; 1       # 2     REMOTE_CACHING = 1 &lt;&lt; 2           # 4     PAIRING = 1 &lt;&lt; 3                  # 8     CACHE_CLEARING = 1 &lt;&lt; 4           # 16     RAW_ADVERTISEMENTS = 1 &lt;&lt; 5       # 32     FEATURE_STATE_AND_MODE = 1 &lt;&lt; 6   # 64</p> <pre><code>0000000000111111\n</code></pre>"},{"location":"native_api/encryption/","title":"Encryption","text":"<p>Recently Added by the ESPHome Team: https://developers.esphome.io/architecture/api/protocol_details/</p> <p>It uses the Noise Protocol Framework, specifically the <code>Noise_NNpsk0_25519_ChaChaPoly_SHA256</code> pattern.</p> <p>The Encryption protocol is reusing the base frame format and the packet format (although encrypted). But some parts are predetermined instead of variable:</p> <ul> <li>No VarInt Length, the length is always 2 bytes (an unsigned 16-bit integer in big-endian format).</li> </ul> <pre><code>---\ntitle: \"Example Frame\"\nconfig:\n  packet:\n    bitsPerRow: 8\n    bitWidth: 128\n---\npacket-beta\n  0: \"Preamble\"\n  1-2: \"Length\"\n  3-7: \"Data\"</code></pre> Part Bits Description Example Preamble 1 Marker bit which states if unencrypted (<code>0x00</code>) or encrypted (<code>0x01</code>) <code>0x00</code> Length 2 Length of the Data (an unsigned 16-bit integer in big-endian format) <code>0x0016</code> or <code>0x0001</code> Data 0-16,383 Encrypted or unencrypted Packet"},{"location":"native_api/encryption/#initialization-of-the-encryption-protocol","title":"Initialization of the encryption protocol","text":"<pre><code>sequenceDiagram\n    Client-&gt;&gt;Api: HandshakeRequest *Zero Byte encrypted*\n    Api-&gt;&gt;Client: Custom Server Hello\n    Api-&gt;&gt;Client: HandshakeResponse *Zero Byte encrypted*\n    Api-&gt;&gt;Client: Encrypted HelloResponse\n\n    loop Keep Alive Messaging\n        Client-&gt;&gt;Api: PingRequest\n        Api-&gt;&gt;Client: PingResponse\n    end\n</code></pre> <ol> <li>Handshake Request is send by the client (which is just a zero byte encrypted message)</li> <li>The Server responds with a Custom Server Hello message:</li> </ol> <pre><code>---\ntitle: \"Custom Server Hello\"\nconfig:\n  packet:\n    bitsPerRow: 8\n    bitWidth: 100\n---\npacket-beta\n  0-0: \"Preamble (0x01)\"\n  1-2: \"Length\"\n  3-3: \"Encryption Type (0x01 for Noise_NNpsk0_25519_ChaChaPoly_SHA256)\"\n  4-5: \"Type\"\n  6-31: \"Protobuf Content\"</code></pre> Part Bits Description Example Preamble 1 Marker bit which states if unencrypted (<code>0x00</code>) or encrypted (<code>0x01</code>) <code>0x00</code> Length 1-5 Variable Message Length according to VarInt Specification (encrypted frames ignore the spec and always use 2 bytes) <code>0x16</code> or <code>0xFFFFFFFFFF</code> Data 0-34,359,738,367 Encrypted or unencrypted Packet <ol> <li>It then send a Handshake Response, which is also a zero byte encrypted message.</li> <li>Finally, the server sends an encrypted HelloResponse message.</li> </ol> <p>Notes:</p> <ul> <li>for api encryption the mdns entry needs to be added: <code>\"api_encryption=Noise_NNpsk0_25519_ChaChaPoly_SHA256\"</code></li> </ul>"},{"location":"native_api/general/","title":"General","text":"<p>The messaging protocol is based on protobuf messages, with</p>"},{"location":"native_api/general/#frame-format","title":"Frame Format <sup>1</sup>","text":"<pre><code>---\ntitle: \"Example Frame\"\nconfig:\n  packet:\n    bitsPerRow: 8\n    bitWidth: 128\n---\npacket-beta\n  0: \"Preamble\"\n  1: \"Length\"\n  2-7: \"Data\"\n</code></pre> Part Bits Description Example Preamble 1 Marker bit which states if unencrypted (<code>0x00</code>) or encrypted (<code>0x01</code>) <code>0x00</code> Length 1-5 Variable Message Length according to VarInt Specification (encrypted frames ignore the spec and always use 2 bytes) <code>0x16</code> or <code>0xFFFFFFFFFF</code> Data 0-34,359,738,367 Encrypted or unencrypted Packet"},{"location":"native_api/general/#packet","title":"Packet","text":"<pre><code>---\ntitle: \"Example Packet\"\n---\npacket-beta\n  0-1: \"Type\"\n  2-31: \"Message\"</code></pre> Part Description Example Type Internal number for identifying the proto message =&gt; Link to custom mapping <code>0x01</code> (HelloMessage) Message Content"},{"location":"native_api/general/#example-communication","title":"Example Communication","text":"<pre><code>sequenceDiagram\n    Client-&gt;&gt;Api: HelloRequest\n    Api-&gt;&gt;Client: HelloResponse\n    Client-&gt;&gt;Api: DisconnectRequest\n\n\n    Client-&gt;&gt;Api: ConnectRequest\n    Api-&gt;&gt;Client: ConnectResponse\n    Client-&gt;&gt;Api: DeviceInfoRequest\n    Api-&gt;&gt;Client: DeviceInfoResponse\n    Client-&gt;&gt;+Api: ListEntitiesRequest\n    Api-&gt;&gt;Client: ListEntitiesSensorResponse\n    Api-&gt;&gt;Client: ListEntitiesBinarySensorResponse\n    Api-&gt;&gt;-Client: ListEntitiesDoneResponse\n\n    loop Keep Alive Messaging\n        Client-&gt;&gt;Api: PingRequest\n        Api-&gt;&gt;Client: PingResponse\n    end\n\n    Client-&gt;&gt;Api: DisconnectRequest\n    Api-&gt;&gt;Client: DisconnectResponse\n</code></pre> <ol> <li> <p>From: https://github.com/esphome/aioesphomeapi/blob/main/aioesphomeapi/connection.py#L700 https://github.com/esphome/aioesphomeapi/blob/main/aioesphomeapi/_frame_helper/plain_text.py#L41 \u21a9</p> </li> </ol>"}]}